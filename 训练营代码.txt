#include <iostream>
#include <fstream>
#include <vector>
#include <string>
#include <sstream>
#include <stdexcept>
#include <cstdlib>

void printUsage() {
    std::cout << "Usage: calculator <operation> <filename>\n";
    std::cout << "operation: add, minus, multiply, divide\n";
    std::cout << "filename: path to the file containing numbers\n";
}

std::vector<double> readNumbersFromFile(const std::string& filename) {
    std::ifstream file(filename);
    if (!file) {
        throw std::runtime_error("File not found: " + filename);
    }
    
    std::vector<double> numbers;
    std::string line;
    while (std::getline(file, line)) {
        std::istringstream iss(line);
        double num;
        if (iss >> num) {
            numbers.push_back(num);
        }
    }
    return numbers;
}

double cal(const std::string& operation, const std::vector<double>& numbers) {
    if (numbers.empty()) {
        throw std::runtime_error("No numbers provided.");
    }
    
    if (operation == "add") {
        double sum = 0;
        for (double num : numbers) {
            sum += num;
        }
        return sum;
    } 
    else if (operation == "minus") {
        double result = numbers[0];
        for (size_t i = 1; i < numbers.size(); ++i) {
            result -= numbers[i];
        }
        return result;
    } 
    else if (operation == "multiply") {
        double result = 1;
        for (double num : numbers) {
            result *= num;
        }
        return result;
    } 
    else if (operation == "divide") {
        double result = numbers[0];
        for (size_t i = 1; i < numbers.size(); ++i) {
            if (numbers[i] == 0) {
                throw std::runtime_error("Division by zero is not allowed.");
            }
            result /= numbers[i];
        }
        return result;
    } 
    else {
        throw std::runtime_error("Unknown operation: " + operation);
    }
}

int main(int argc, char* argv[]) {
    if (argc != 3) {
        printUsage();
        return 1;
    }

    std::string operation = argv[1];
    std::string filename = argv[2];

    try {
        std::vector<double> numbers = readNumbersFromFile(filename);
        double result = cal(operation, numbers);
        std::cout << "Result of " << operation << " operation: " << result << "\n";
    } 
    catch (const std::exception& ex) {
        std::cerr << "Error: " << ex.what() << "\n";
        return 1;
    }

    return 0;
}